--- ./basic.cpp 2016-05-10 00:00:00.000000000 +0900
+++ ./basic.cpp 2016-05-13 00:00:00.000000000 +0900
@@ -101,10 +101,18 @@ enum {
   I_GTE, I_SHARP, I_GT, I_EQ, I_LTE, I_LT,
   I_ARRAY, I_RND, I_ABS, I_SIZE,
   I_LIST, I_RUN, I_NEW,
-  I_NUM, I_VAR, I_STR,
+  I_NUM,
+  I_VAR_A, I_VAR_B, I_VAR_C, I_VAR_D, I_VAR_E, I_VAR_F,
+  I_VAR_G, I_VAR_H, I_VAR_I, I_VAR_J, I_VAR_K, I_VAR_L,
+  I_VAR_M, I_VAR_N, I_VAR_O, I_VAR_P, I_VAR_Q, I_VAR_R,
+  I_VAR_S, I_VAR_T, I_VAR_U, I_VAR_V, I_VAR_W, I_VAR_X,
+  I_VAR_Y, I_VAR_Z,
+  I_STR,
   I_EOL
 };

+#define is_ivar(c) ((c) >= I_VAR_A && (c) <= I_VAR_Z)
+
 // List formatting condition
 // 後ろに空白を入れない中間コード
 const unsigned char i_nsa[] PROGMEM = {
@@ -470,18 +478,17 @@ unsigned char toktoi() {

     //変数への変換を試みる
     if (c_isalpha(*ptok)) { //もし文字がアルファベットなら
-      if (len >= SIZE_IBUF - 2) { //もし中間コードが長すぎたら
+      if (len >= SIZE_IBUF - 1) { //もし中間コードが長すぎたら
         err = ERR_IBUFOF; //エラー番号をセット
         return 0; //0を持ち帰る
       }
       //もし変数が3個並んだら
-      if (len >= 4 && ibuf[len - 2] == I_VAR && ibuf[len - 4] == I_VAR) {
+      if (len >= 2 && is_ivar(ibuf[len - 1]) && is_ivar(ibuf[len - 2])) {
         err = ERR_SYNTAX; //エラー番号をセット
         return 0; //0を持ち帰る
       }

-      ibuf[len++] = I_VAR; //中間コードを記録
-      ibuf[len++] = c_toupper(*ptok) - 'A'; //変数番号を記録
+      ibuf[len++] = I_VAR_A + c_toupper(*ptok) - 'A'; //変数の中間コードを記録
       s++; //次の文字へ進む
     }
     else
@@ -601,9 +608,8 @@ void putlist(unsigned char* ip) {
     else

     //変数の処理
-    if (*ip == I_VAR) { //もし定数なら
-      ip++; //ポインタを変数番号へ進める
-      c_putch(*ip++ + 'A'); //変数名を取得して表示
+    if (is_ivar(*ip)) { //もし変数なら
+      c_putch(*ip++ - I_VAR_A + 'A'); //変数名を取得して表示
       if (!nospaceb(*ip)) //もし例外にあたらなければ
         c_putch(' '); //空白を表示
     }
@@ -628,7 +634,7 @@ void putlist(unsigned char* ip) {
       while (i--) //文字数だけ繰り返す
         c_putch(*ip++); //ポインタを進めながら文字を表示
       c_putch(c); //文字列の括りを表示
-      if (*ip == I_VAR) //もし次の中間コードが変数だったら
+      if (is_ivar(*ip)) //もし次の中間コードが変数だったら
         c_putch(' '); //空白を表示
     }

@@ -688,9 +694,8 @@ short ivalue() {
     break; //ここで打ち切る

   //変数の値の取得
-  case I_VAR: //変数の場合
-    cip++; //中間コードポインタを次へ進める
-    value = var[*cip++]; //変数番号から変数の値を取得して次を指し示す
+  case I_VAR_A ... I_VAR_Z: //変数の場合
+    value = var[*cip++ - I_VAR_A]; //変数の中間コードから変数の値を取得して次を指し示す
     break; //ここで打ち切る

   //括弧の値の取得
@@ -923,16 +928,15 @@ void iinput() {

     //値を入力する処理
     switch (*cip) { //中間コードで分岐
-    case I_VAR: //変数の場合
-      cip++; //中間コードポインタを次へ進める
+    case I_VAR_A ... I_VAR_Z: //変数の場合
       if (prompt) { //もしまだプロンプトを表示していなければ
-        c_putch(*cip + 'A'); //変数名を表示
+        c_putch(*cip - I_VAR_A + 'A'); //変数名を表示
         c_putch(':'); //「:」を表示
       }
       value = getnum(); //値を入力
       if (err) //もしエラーが生じたら
         return; //終了
-      var[*cip++] = value; //変数へ代入
+      var[*cip++ - I_VAR_A] = value; //変数へ代入
       break; //打ち切る

     case I_ARRAY: //配列の場合
@@ -982,7 +986,7 @@ void ivar() {
   short value; //値
   short index; //変数番号

-  index = *cip++; //変数番号を取得して次へ進む
+  index = *cip++ - I_VAR_A; //変数番号を取得して次へ進む

   if (*cip != I_EQ) { //もし「=」でなければ
     err = ERR_VWOEQ; //エラー番号をセット
@@ -1027,8 +1031,7 @@ void iarray() {
 void ilet() {
   switch (*cip) { //中間コードで分岐

-  case I_VAR: //変数の場合
-    cip++; //中間コードポインタを次へ進める
+  case I_VAR_A ... I_VAR_Z: //変数の場合
     ivar(); //変数への代入を実行
     break; //打ち切る

@@ -1114,11 +1117,11 @@ unsigned char* iexe() {
       cip++; //中間コードポインタを次へ進める

       //変数名を取得して開始値を代入（例I=1）
-      if (*cip++ != I_VAR) { //もし変数がなかったら
+      if (!is_ivar(*cip)) { //もし変数がなかったら
         err = ERR_FORWOV; //エラー番号をセット
         break; //打ち切る
       }
-      index = *cip; //変数名を取得
+      index = *cip - I_VAR_A; //変数名を取得
       ivar(); //代入文を実行
       if (err) //もしエラーが生じたら
         break; //打ち切る
@@ -1169,11 +1172,11 @@ unsigned char* iexe() {

       //変数名を復帰
       index = (short)(uintptr_t)lstk[lstki - 1]; //変数名を復帰
-      if (*cip++ != I_VAR) { //もしNEXTの後ろに変数がなかったら
+      if (!is_ivar(*cip)) { //もしNEXTの後ろに変数がなかったら
         err = ERR_NEXTWOV; //エラー番号をセット
         break; //打ち切る
       }
-      if (*cip++ != index) { //もし復帰した変数名と一致しなかったら
+      if (*cip++ - I_VAR_A != index) { //もし復帰した変数名と一致しなかったら
         err = ERR_NEXTUM; //エラー番号をセット
         break; //打ち切る
       }
@@ -1216,8 +1219,7 @@ unsigned char* iexe() {
       return clp; //行ポインタを持ち帰る

     //一般の文に相当する中間コードの照合と処理
-    case I_VAR: //変数の場合（LETを省略した代入文）
-      cip++; //中間コードポインタを次へ進める
+    case I_VAR_A ... I_VAR_Z: //変数の場合（LETを省略した代入文）
       ivar(); //代入文を実行
       break; //打ち切る
     case I_ARRAY: //配列の場合（LETを省略した代入文）

